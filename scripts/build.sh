#!/bin/bash -e
################################################################
#
#  Name: Build Script
#  GitHub repository: https://github.com/2ndSightLab/aws-scripts
#  File: scripts/build.sh
#  Copyright: Â© 2025 2nd Sight Lab, LLC
# 
#  Builds Rust project in debug or release mode with architecture-specific compilation
# 
#  This software, which includes components generated with the assistance of artificial
#  intelligence, is free for personal, educational, and non-profit use, provided that
#  the included copyright notice is retained in all copies or substantial portions of
#  the software. This license, however, does not grant permission for any commercial
#  use, which requires obtaining a separate commercial license from the author. The
#  software is provided "as is," without any warranty, and the author cannot be held
#  liable for any damages or claims arising from its use. By using this software,
#  all users acknowledge that any potentially uncopyrightable portions generated by
#  AI are governed by the terms of this license as part of the overall work.
# 
################################################################


# Set standard directory variables and source all functions
if [ -z "$SCRIPT_DIR" ]; then
    SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
fi
for FUNC in "$SCRIPT_DIR/functions"/*.sh; do source "$FUNC"; done
PROJECT_DIR=$(get_project_dir)

# Define configuration constants
DEBUG_CHOICE=1
RELEASE_CHOICE=2
ERROR_EXIT=1

# Clean up any leftover cargo install temp directories
rm -rf /tmp/cargo-install* 2>/dev/null

# Get current architecture
CURRENT_ARCH=$(rustc --version --verbose | grep host | cut -d' ' -f2)

echo "Building for architecture: $CURRENT_ARCH"
# Check for command line arguments or non-interactive mode
if [[ "$1" == "--debug" ]] || [[ -n "$CI" ]] || [[ ! -t 0 ]]; then
    CHOICE=$DEBUG_CHOICE
elif [[ "$1" == "--release" ]]; then
    CHOICE=$RELEASE_CHOICE
else
    echo "Select build type:"
    echo "1) Debug (all binaries including tests, examples, and benchmarks)"
    echo "2) Release"
    read -p "Enter choice (1 or 2): " CHOICE
fi

case $CHOICE in
    1)
        echo "Building in debug mode..."
        echo "Building everything (main binary, tests, examples, benchmarks)..."
        cargo build --all-targets --target $CURRENT_ARCH
        ;;
    2)
        echo "Building in release mode..."
        cargo build --release --target $CURRENT_ARCH
        ;;
    *)
        echo "Invalid choice. Please enter 1 or 2."
        exit $ERROR_EXIT
        ;;
esac

if [ $? -eq 0 ]; then
    echo "Build completed successfully!"
    
    # Validate that the correct artifacts were created based on project type
    # Get project type, name, and base directory
    PROJECT_TYPE=$(get_project_type)
    PROJECT_NAME=$(get_project_name)
    
    get_build_artifact "$PROJECT_TYPE" "$CHOICE" "$PROJECT_DIR" "$CURRENT_ARCH" "$PROJECT_NAME" "true"
else
    echo "Build failed!"
    exit $ERROR_EXIT
fi

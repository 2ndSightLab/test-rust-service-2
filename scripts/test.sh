#!/bin/bash
################################################################
#
#  Name: Test Runner
#  GitHub repository: https://github.com/2ndSightLab/aws-scripts
#  File: scripts/test.sh
#  Copyright: Â© 2025 2nd Sight Lab, LLC
# 
#  Runs all Rust tests including common and local tests with categorization and reporting
# 
#  This software, which includes components generated with the assistance of artificial
#  intelligence, is free for personal, educational, and non-profit use, provided that
#  the included copyright notice is retained in all copies or substantial portions of
#  the software. This license, however, does not grant permission for any commercial
#  use, which requires obtaining a separate commercial license from the author. The
#  software is provided "as is," without any warranty, and the author cannot be held
#  liable for any damages or claims arising from its use. By using this software,
#  all users acknowledge that any potentially uncopyrightable portions generated by
#  AI are governed by the terms of this license as part of the overall work.
# 
################################################################


# Initialize test counters
TOTAL_TESTS=0
TOTAL_ERRORS=0
TOTAL_PASSED=0
TOTAL_FAILED=0

TOTAL_COMMON=0
TOTAL_LOCAL=0

TOTAL_INTEGRATION=0
TOTAL_SECURITY=0
TOTAL_UNIT=0

# Source all functions
if [ -z "$SCRIPT_DIR" ]; then
    SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
fi
for FUNC in "$SCRIPT_DIR/functions"/*.sh; do source "$FUNC"; done

# Define configuration constants
DEBUG_CHOICE=1
RELEASE_CHOICE=2
SUCCESS_EXIT=0
TEST_FAILURE_EXIT=101

# Check for command line arguments or non-interactive mode
if [[ "$1" == "--debug" ]] || [[ -n "$CI" ]] || [[ ! -t 0 ]]; then
    CHOICE=$DEBUG_CHOICE
elif [[ "$1" == "--release" ]]; then
    CHOICE=$RELEASE_CHOICE
else
    echo "Select build type:"
    echo "1) Debug (all binaries including tests, examples, and benchmarks)"
    echo "2) Release"
    read -p "Enter choice (1 or 2): " CHOICE
fi

if [ $CHOICE -eq $DEBUG_CHOICE ]; then
    "$SCRIPT_DIR/build.sh" --debug
    "$SCRIPT_DIR/install.sh" --debug
else
    "$SCRIPT_DIR/build.sh" --release
    "$SCRIPT_DIR/install.sh" --release
fi

for CATEGORY_NAME in $(get_test_categories); do

    # Skip integration tests for library projects since they don't install binaries
    PROJECT_TYPE=$(get_project_type)
    if [[ "$PROJECT_TYPE" == "lib" && "$CATEGORY_NAME" == *"integration"* ]]; then
        echo "Skipping integration tests for library project"
        continue
    fi

    if [[ "$CATEGORY_NAME" == *"common"* ]]; then test_type="common"; else test_type="local"; fi

    echo "================================"
    echo "Category_name: $CATEGORY_NAME"
    echo "Test type: $test_type"
    echo "================================"


    CATEGORY_TESTS=$(cargo test --test "$CATEGORY_NAME" -- --list 2>/dev/null | grep ": test$" | sed 's/: test$//'| grep -v "run_all_common")
    
    for TEST_NAME in $CATEGORY_TESTS; do
        echo "$TEST_NAME"
        if [[ "$TEST_NAME" == *"::common::"* ]]; then
            TOTAL_COMMON=$((TOTAL_COMMON + 1))
        else
            TOTAL_LOCAL=$((TOTAL_LOCAL + 1))
        fi
        cargo test --test "$CATEGORY_NAME" "$TEST_NAME"
        EXIT_CODE=$?
          
        # Track test results based on return codes:
        # 0 = passed
        # 101 = failed (test failure)
        # other = error (compilation/runtime error)
        # cargo counts panics in code being tested as failures
	if [ $EXIT_CODE -eq $SUCCESS_EXIT ]; then
            TOTAL_PASSED=$((TOTAL_PASSED + 1))
        elif [ $EXIT_CODE -eq $TEST_FAILURE_EXIT ]; then
            TOTAL_FAILED=$((TOTAL_FAILED + 1))
        else
            TOTAL_ERRORS=$((TOTAL_ERRORS + 1))
        fi

        if [[ "$CATEGORY_NAME" == security_checks* ]]; then
          TOTAL_SECURITY=$((TOTAL_SECURITY + 1))
        elif [[ "$CATEGORY_NAME" == integration* ]]; then
          TOTAL_INTEGRATION=$((TOTAL_INTEGRATION + 1))
        elif [[ "$CATEGORY_NAME" == uni* ]]; then
          TOTAL_UNIT=$((TOTAL_UNIT + 1))
        else
          TOTAL_OTHER=$((TOTAL_OTHER + 1))
        fi

        TOTAL_TESTS=$((TOTAL_TESTS + 1))

        echo "================================"
        
    done

    echo 
    echo "Done testing: $CATEGORY_NAME"
    echo

done

echo "================================"
echo "Test Summary:"
echo "Total Tests: $TOTAL_TESTS"
echo
echo "Total Common: $TOTAL_COMMON"
echo "Total Local: $TOTAL_LOCAL"
echo
echo "Total Integration: $TOTAL_INTEGRATION"
echo "Total Security: $TOTAL_SECURITY"
echo "Total Unit Tests: $TOTAL_UNIT"
echo "Total Other: $TOTAL_OTHER"
echo
echo "Passed: $TOTAL_PASSED"
echo "Failed: $TOTAL_FAILED"
echo "Errors: $TOTAL_ERRORS"
echo "================================"
